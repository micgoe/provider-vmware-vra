// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkIPRangeInitParameters struct {

	// A human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// End IP address of the range.
	// End IP address of the range.
	EndIPAddress *string `json:"endIpAddress,omitempty" tf:"end_ip_address,omitempty"`

	// ID of the network IP range
	// The Id of the fabric network.
	FabricNetworkID *string `json:"fabricNetworkId,omitempty" tf:"fabric_network_id,omitempty"`

	// The Ids of the fabric networks.
	// The Ids of the fabric networks.
	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	// IP address version: IPv4 or IPv6.
	// IP address version: IPv4 or IPv6.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the network IP range.
	// The name of the network IP range.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Start IP address of the range.
	// Start IP address of the range.
	StartIPAddress *string `json:"startIpAddress,omitempty" tf:"start_ip_address,omitempty"`

	// Set of tag keys and values to apply to the resource.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	Tags []NetworkIPRangeTagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkIPRangeLinksInitParameters struct {
}

type NetworkIPRangeLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +listType=set
	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type NetworkIPRangeLinksParameters struct {
}

type NetworkIPRangeObservation struct {

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// A human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// End IP address of the range.
	// End IP address of the range.
	EndIPAddress *string `json:"endIpAddress,omitempty" tf:"end_ip_address,omitempty"`

	// External entity Id on the provider side.
	// External entity Id on the provider side.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// ID of the network IP range
	// The Id of the fabric network.
	FabricNetworkID *string `json:"fabricNetworkId,omitempty" tf:"fabric_network_id,omitempty"`

	// The Ids of the fabric networks.
	// The Ids of the fabric networks.
	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	// ID of the network IP range
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address version: IPv4 or IPv6.
	// IP address version: IPv4 or IPv6.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// HATEOAS of the entity
	Links []NetworkIPRangeLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	// The name of the network IP range.
	// The name of the network IP range.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Email of the user that owns the entity.
	// Email of the user that owns the entity.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Start IP address of the range.
	// Start IP address of the range.
	StartIPAddress *string `json:"startIpAddress,omitempty" tf:"start_ip_address,omitempty"`

	// Set of tag keys and values to apply to the resource.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	Tags []NetworkIPRangeTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NetworkIPRangeParameters struct {

	// A human-friendly description.
	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// End IP address of the range.
	// End IP address of the range.
	// +kubebuilder:validation:Optional
	EndIPAddress *string `json:"endIpAddress,omitempty" tf:"end_ip_address,omitempty"`

	// ID of the network IP range
	// The Id of the fabric network.
	// +kubebuilder:validation:Optional
	FabricNetworkID *string `json:"fabricNetworkId,omitempty" tf:"fabric_network_id,omitempty"`

	// The Ids of the fabric networks.
	// The Ids of the fabric networks.
	// +kubebuilder:validation:Optional
	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	// IP address version: IPv4 or IPv6.
	// IP address version: IPv4 or IPv6.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the network IP range.
	// The name of the network IP range.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Start IP address of the range.
	// Start IP address of the range.
	// +kubebuilder:validation:Optional
	StartIPAddress *string `json:"startIpAddress,omitempty" tf:"start_ip_address,omitempty"`

	// Set of tag keys and values to apply to the resource.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	// +kubebuilder:validation:Optional
	Tags []NetworkIPRangeTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkIPRangeTagsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetworkIPRangeTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetworkIPRangeTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NetworkIPRangeSpec defines the desired state of NetworkIPRange
type NetworkIPRangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkIPRangeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkIPRangeInitParameters `json:"initProvider,omitempty"`
}

// NetworkIPRangeStatus defines the observed state of NetworkIPRange.
type NetworkIPRangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkIPRangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkIPRange is the Schema for the NetworkIPRanges API. Creates a network_ip_range resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type NetworkIPRange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endIpAddress) || (has(self.initProvider) && has(self.initProvider.endIpAddress))",message="spec.forProvider.endIpAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipVersion) || (has(self.initProvider) && has(self.initProvider.ipVersion))",message="spec.forProvider.ipVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startIpAddress) || (has(self.initProvider) && has(self.initProvider.startIpAddress))",message="spec.forProvider.startIpAddress is a required parameter"
	Spec   NetworkIPRangeSpec   `json:"spec"`
	Status NetworkIPRangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkIPRangeList contains a list of NetworkIPRanges
type NetworkIPRangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkIPRange `json:"items"`
}

// Repository type metadata.
var (
	NetworkIPRange_Kind             = "NetworkIPRange"
	NetworkIPRange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkIPRange_Kind}.String()
	NetworkIPRange_KindAPIVersion   = NetworkIPRange_Kind + "." + CRDGroupVersion.String()
	NetworkIPRange_GroupVersionKind = CRDGroupVersion.WithKind(NetworkIPRange_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkIPRange{}, &NetworkIPRangeList{})
}
