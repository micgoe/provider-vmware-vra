// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountVmcInitParameters struct {

	// VMC API access key.
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// Accept self-signed certificate when connecting to the cloud account.
	// Whether to accept self signed certificate when connecting to the vCenter Server.
	AcceptSelfSignedCert *bool `json:"acceptSelfSignedCert,omitempty" tf:"accept_self_signed_cert,omitempty"`

	// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
	// Identifier of a data collector vm deployed in the on premise infrastructure.
	DcID *string `json:"dcId,omitempty" tf:"dc_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	// The name of this resource instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// IP address of the NSX Manager server in the specified SDDC / FQDN.
	NsxHostname *string `json:"nsxHostname,omitempty" tf:"nsx_hostname,omitempty"`

	// Set of region names enabled for the cloud account.
	// The set of region ids that will be enabled for this cloud account.
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
	SddcName *string `json:"sddcName,omitempty" tf:"sddc_name,omitempty"`

	// Set of tag keys and values to apply to the cloud account.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	Tags []AccountVmcTagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
	VcenterHostname *string `json:"vcenterHostname,omitempty" tf:"vcenter_hostname,omitempty"`

	// Password used to authenticate to the cloud Account.
	VcenterPasswordSecretRef v1.SecretKeySelector `json:"vcenterPasswordSecretRef" tf:"-"`

	// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
	VcenterUsername *string `json:"vcenterUsername,omitempty" tf:"vcenter_username,omitempty"`
}

type AccountVmcLinksInitParameters struct {
}

type AccountVmcLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +listType=set
	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type AccountVmcLinksParameters struct {
}

type AccountVmcObservation struct {

	// VMC API access key.
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// Accept self-signed certificate when connecting to the cloud account.
	// Whether to accept self signed certificate when connecting to the vCenter Server.
	AcceptSelfSignedCert *bool `json:"acceptSelfSignedCert,omitempty" tf:"accept_self_signed_cert,omitempty"`

	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
	// Identifier of a data collector vm deployed in the on premise infrastructure.
	DcID *string `json:"dcId,omitempty" tf:"dc_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the VMC cloud account.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// HATEOAS of entity.
	Links []AccountVmcLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	// The name of this resource instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// IP address of the NSX Manager server in the specified SDDC / FQDN.
	NsxHostname *string `json:"nsxHostname,omitempty" tf:"nsx_hostname,omitempty"`

	// ID of organization that entity belongs to.
	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Email of entity owner.
	// Email of the user that owns the entity.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Set of region names enabled for the cloud account.
	// The set of region ids that will be enabled for this cloud account.
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
	SddcName *string `json:"sddcName,omitempty" tf:"sddc_name,omitempty"`

	// Set of tag keys and values to apply to the cloud account.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	Tags []AccountVmcTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
	VcenterHostname *string `json:"vcenterHostname,omitempty" tf:"vcenter_hostname,omitempty"`

	// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
	VcenterUsername *string `json:"vcenterUsername,omitempty" tf:"vcenter_username,omitempty"`
}

type AccountVmcParameters struct {

	// VMC API access key.
	// +kubebuilder:validation:Optional
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// Accept self-signed certificate when connecting to the cloud account.
	// Whether to accept self signed certificate when connecting to the vCenter Server.
	// +kubebuilder:validation:Optional
	AcceptSelfSignedCert *bool `json:"acceptSelfSignedCert,omitempty" tf:"accept_self_signed_cert,omitempty"`

	// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
	// Identifier of a data collector vm deployed in the on premise infrastructure.
	// +kubebuilder:validation:Optional
	DcID *string `json:"dcId,omitempty" tf:"dc_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	// The name of this resource instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// IP address of the NSX Manager server in the specified SDDC / FQDN.
	// +kubebuilder:validation:Optional
	NsxHostname *string `json:"nsxHostname,omitempty" tf:"nsx_hostname,omitempty"`

	// Set of region names enabled for the cloud account.
	// The set of region ids that will be enabled for this cloud account.
	// +kubebuilder:validation:Optional
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
	// +kubebuilder:validation:Optional
	SddcName *string `json:"sddcName,omitempty" tf:"sddc_name,omitempty"`

	// Set of tag keys and values to apply to the cloud account.
	// Example: [ { "key" : "vmware", "value": "provider" } ]
	// +kubebuilder:validation:Optional
	Tags []AccountVmcTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
	// +kubebuilder:validation:Optional
	VcenterHostname *string `json:"vcenterHostname,omitempty" tf:"vcenter_hostname,omitempty"`

	// Password used to authenticate to the cloud Account.
	// +kubebuilder:validation:Optional
	VcenterPasswordSecretRef v1.SecretKeySelector `json:"vcenterPasswordSecretRef" tf:"-"`

	// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
	// +kubebuilder:validation:Optional
	VcenterUsername *string `json:"vcenterUsername,omitempty" tf:"vcenter_username,omitempty"`
}

type AccountVmcTagsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccountVmcTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AccountVmcTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// AccountVmcSpec defines the desired state of AccountVmc
type AccountVmcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountVmcParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountVmcInitParameters `json:"initProvider,omitempty"`
}

// AccountVmcStatus defines the observed state of AccountVmc.
type AccountVmcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountVmcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccountVmc is the Schema for the AccountVmcs API. Creates a vra_cloud_account_vmc resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type AccountVmc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiToken) || (has(self.initProvider) && has(self.initProvider.apiToken))",message="spec.forProvider.apiToken is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nsxHostname) || (has(self.initProvider) && has(self.initProvider.nsxHostname))",message="spec.forProvider.nsxHostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regions) || (has(self.initProvider) && has(self.initProvider.regions))",message="spec.forProvider.regions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sddcName) || (has(self.initProvider) && has(self.initProvider.sddcName))",message="spec.forProvider.sddcName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterHostname) || (has(self.initProvider) && has(self.initProvider.vcenterHostname))",message="spec.forProvider.vcenterHostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterPasswordSecretRef)",message="spec.forProvider.vcenterPasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterUsername) || (has(self.initProvider) && has(self.initProvider.vcenterUsername))",message="spec.forProvider.vcenterUsername is a required parameter"
	Spec   AccountVmcSpec   `json:"spec"`
	Status AccountVmcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountVmcList contains a list of AccountVmcs
type AccountVmcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountVmc `json:"items"`
}

// Repository type metadata.
var (
	AccountVmc_Kind             = "AccountVmc"
	AccountVmc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountVmc_Kind}.String()
	AccountVmc_KindAPIVersion   = AccountVmc_Kind + "." + CRDGroupVersion.String()
	AccountVmc_GroupVersionKind = CRDGroupVersion.WithKind(AccountVmc_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountVmc{}, &AccountVmcList{})
}
