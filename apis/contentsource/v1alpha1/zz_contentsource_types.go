// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// Content source branch name.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Content source type.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Content source integration id as seen in vRA integrations.
	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`

	// Path to refer to in the content source repository and branch.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Name of the project.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Content source repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ConfigObservation struct {

	// Content source branch name.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Content source type.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Content source integration id as seen in vRA integrations.
	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`

	// Path to refer to in the content source repository and branch.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Name of the project.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Content source repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ConfigParameters struct {

	// Content source branch name.
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Content source type.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Content source integration id as seen in vRA integrations.
	// +kubebuilder:validation:Optional
	IntegrationID *string `json:"integrationId" tf:"integration_id,omitempty"`

	// Path to refer to in the content source repository and branch.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// Name of the project.
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName" tf:"project_name,omitempty"`

	// Content source repository.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ContentSourceInitParameters struct {

	// Content source custom configuration.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the project this entity belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled *bool `json:"syncEnabled,omitempty" tf:"sync_enabled,omitempty"`

	// Content Source type. Supported values are com.gitlab, com.github, com.vmware.marketplace, org.bitbucket.
	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

type ContentSourceObservation struct {

	// Content source custom configuration.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The user the entity was created by.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The id of this cloud template.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date when the entity was last updated. The date is in ISO 6801 and UTC.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	// The user the entity was last updated by.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// The id of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled *bool `json:"syncEnabled,omitempty" tf:"sync_enabled,omitempty"`

	// Content Source type. Supported values are com.gitlab, com.github, com.vmware.marketplace, org.bitbucket.
	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

type ContentSourceParameters struct {

	// Content source custom configuration.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A human-friendly name for content source used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the project this entity belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Flag indicating whether sync is enabled for this content source.
	// +kubebuilder:validation:Optional
	SyncEnabled *bool `json:"syncEnabled,omitempty" tf:"sync_enabled,omitempty"`

	// Content Source type. Supported values are com.gitlab, com.github, com.vmware.marketplace, org.bitbucket.
	// +kubebuilder:validation:Optional
	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

// ContentSourceSpec defines the desired state of ContentSource
type ContentSourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContentSourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContentSourceInitParameters `json:"initProvider,omitempty"`
}

// ContentSourceStatus defines the observed state of ContentSource.
type ContentSourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContentSourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContentSource is the Schema for the ContentSources API. A resource that can be used to create a content source in vRealize Automation(vRA).
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type ContentSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || (has(self.initProvider) && has(self.initProvider.config))",message="spec.forProvider.config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.syncEnabled) || (has(self.initProvider) && has(self.initProvider.syncEnabled))",message="spec.forProvider.syncEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.typeId) || (has(self.initProvider) && has(self.initProvider.typeId))",message="spec.forProvider.typeId is a required parameter"
	Spec   ContentSourceSpec   `json:"spec"`
	Status ContentSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContentSourceList contains a list of ContentSources
type ContentSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContentSource `json:"items"`
}

// Repository type metadata.
var (
	ContentSource_Kind             = "ContentSource"
	ContentSource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContentSource_Kind}.String()
	ContentSource_KindAPIVersion   = ContentSource_Kind + "." + CRDGroupVersion.String()
	ContentSource_GroupVersionKind = CRDGroupVersion.WithKind(ContentSource_Kind)
)

func init() {
	SchemeBuilder.Register(&ContentSource{}, &ContentSourceList{})
}
