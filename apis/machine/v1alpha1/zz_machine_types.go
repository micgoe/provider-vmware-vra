// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BootConfigInitParameters struct {

	// Calid cloud config data in json-escaped yaml syntax.
	// A valid cloud config data in json-escaped yaml syntax.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`
}

type BootConfigObservation struct {

	// Calid cloud config data in json-escaped yaml syntax.
	// A valid cloud config data in json-escaped yaml syntax.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`
}

type BootConfigParameters struct {

	// Calid cloud config data in json-escaped yaml syntax.
	// A valid cloud config data in json-escaped yaml syntax.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`
}

type ConstraintsInitParameters struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`
}

type ConstraintsObservation struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`
}

type ConstraintsParameters struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory" tf:"mandatory,omitempty"`
}

type DisksInitParameters struct {

	// ID of existing block device.
	// The id of the existing block device.
	BlockDeviceID *string `json:"blockDeviceId,omitempty" tf:"block_device_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	// A human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DisksListInitParameters struct {
}

type DisksListObservation struct {

	// ID of existing block device.
	BlockDeviceID *string `json:"blockDeviceId,omitempty" tf:"block_device_id,omitempty"`

	// Human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DisksListParameters struct {
}

type DisksObservation struct {

	// ID of existing block device.
	// The id of the existing block device.
	BlockDeviceID *string `json:"blockDeviceId,omitempty" tf:"block_device_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	// A human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DisksParameters struct {

	// ID of existing block device.
	// The id of the existing block device.
	// +kubebuilder:validation:Optional
	BlockDeviceID *string `json:"blockDeviceId" tf:"block_device_id,omitempty"`

	// Human-friendly description.
	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	// A human-friendly block-device name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ImageDiskConstraintsInitParameters struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`
}

type ImageDiskConstraintsObservation struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`
}

type ImageDiskConstraintsParameters struct {

	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// Indicates whether this constraint should be strictly enforced or not.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory" tf:"mandatory,omitempty"`
}

type LinksInitParameters struct {
}

type LinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +listType=set
	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksParameters struct {
}

type MachineInitParameters struct {

	// Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.
	// Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts.
	BootConfig []BootConfigInitParameters `json:"bootConfig,omitempty" tf:"boot_config,omitempty"`

	// Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.
	// Example: [{"mandatory" : "true", "expression": "environment":"prod"}, {"mandatory" : "false", "expression": "pci"}]
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	Constraints []ConstraintsInitParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// Additional custom properties that may be used to extend the machine.
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Describes machine within the scope of your organization and is not propagated to the cloud.
	// The id of the deployment that is associated with this resource.
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// A human-friendly description.
	// Describes machine within the scope of your organization and is not propagated to the cloud.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specification for attaching/detaching disks to a machine.
	// Specification for attaching/detaching disks to a machine.
	Disks []DisksInitParameters `json:"disks,omitempty" tf:"disks,omitempty"`

	// Flavor of machine instance.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Type of image used for this machine.
	// Type of image used for this machine.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example: [{"mandatory" : "true", "expression": "environment:prod"}, {"mandatory" : "false", "expression": "pci"}]. It is nested argument with the following properties.
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	ImageDiskConstraints []ImageDiskConstraintsInitParameters `json:"imageDiskConstraints,omitempty" tf:"image_disk_constraints,omitempty"`

	// Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided
	ImageRef *string `json:"imageRef,omitempty" tf:"image_ref,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.
	Nics []NicsInitParameters `json:"nics,omitempty" tf:"nics,omitempty"`

	// ID of project that resource belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Set of tag keys and optional values that should be set on any resource that is produced from this specification. example: [ { "key" : "ownedBy", "value": "Rainpole" } ]. It is nested argument with the following properties.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type MachineObservation struct {

	// Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.
	// Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts.
	BootConfig []BootConfigObservation `json:"bootConfig,omitempty" tf:"boot_config,omitempty"`

	// Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.
	// Example: [{"mandatory" : "true", "expression": "environment":"prod"}, {"mandatory" : "false", "expression": "pci"}]
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	Constraints []ConstraintsObservation `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// Date when the entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// Additional custom properties that may be used to extend the machine.
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Describes machine within the scope of your organization and is not propagated to the cloud.
	// The id of the deployment that is associated with this resource.
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// A human-friendly description.
	// Describes machine within the scope of your organization and is not propagated to the cloud.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specification for attaching/detaching disks to a machine.
	// Specification for attaching/detaching disks to a machine.
	Disks []DisksObservation `json:"disks,omitempty" tf:"disks,omitempty"`

	// List of all disks attached to a machine including boot disk, and additional block devices attached using the disks attribute.
	// List of all disks attached to a machine including boot disk, and additional block devices attached using the disks attribute.
	DisksList []DisksListObservation `json:"disksList,omitempty" tf:"disks_list,omitempty"`

	// External entity ID on the provider side.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// External regionId of the resource.
	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	// External zoneId of the resource.
	ExternalZoneID *string `json:"externalZoneId,omitempty" tf:"external_zone_id,omitempty"`

	// Flavor of machine instance.
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of image used for this machine.
	// Type of image used for this machine.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example: [{"mandatory" : "true", "expression": "environment:prod"}, {"mandatory" : "false", "expression": "pci"}]. It is nested argument with the following properties.
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	ImageDiskConstraints []ImageDiskConstraintsObservation `json:"imageDiskConstraints,omitempty" tf:"image_disk_constraints,omitempty"`

	// Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided
	ImageRef *string `json:"imageRef,omitempty" tf:"image_ref,omitempty"`

	// HATEOAS of the entity
	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.
	Nics []NicsObservation `json:"nics,omitempty" tf:"nics,omitempty"`

	// ID of the organization this entity belongs to.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Email of entity owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Power state of machine.
	PowerState *string `json:"powerState,omitempty" tf:"power_state,omitempty"`

	// ID of project that resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Set of tag keys and optional values that should be set on any resource that is produced from this specification. example: [ { "key" : "ownedBy", "value": "Rainpole" } ]. It is nested argument with the following properties.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type MachineParameters struct {

	// Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.
	// Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts.
	// +kubebuilder:validation:Optional
	BootConfig []BootConfigParameters `json:"bootConfig,omitempty" tf:"boot_config,omitempty"`

	// Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.
	// Example: [{"mandatory" : "true", "expression": "environment":"prod"}, {"mandatory" : "false", "expression": "pci"}]
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	// +kubebuilder:validation:Optional
	Constraints []ConstraintsParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// Additional custom properties that may be used to extend the machine.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Describes machine within the scope of your organization and is not propagated to the cloud.
	// The id of the deployment that is associated with this resource.
	// +kubebuilder:validation:Optional
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// A human-friendly description.
	// Describes machine within the scope of your organization and is not propagated to the cloud.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specification for attaching/detaching disks to a machine.
	// Specification for attaching/detaching disks to a machine.
	// +kubebuilder:validation:Optional
	Disks []DisksParameters `json:"disks,omitempty" tf:"disks,omitempty"`

	// Flavor of machine instance.
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Type of image used for this machine.
	// Type of image used for this machine.
	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example: [{"mandatory" : "true", "expression": "environment:prod"}, {"mandatory" : "false", "expression": "pci"}]. It is nested argument with the following properties.
	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	// +kubebuilder:validation:Optional
	ImageDiskConstraints []ImageDiskConstraintsParameters `json:"imageDiskConstraints,omitempty" tf:"image_disk_constraints,omitempty"`

	// Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided
	// +kubebuilder:validation:Optional
	ImageRef *string `json:"imageRef,omitempty" tf:"image_ref,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.
	// +kubebuilder:validation:Optional
	Nics []NicsParameters `json:"nics,omitempty" tf:"nics,omitempty"`

	// ID of project that resource belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Set of tag keys and optional values that should be set on any resource that is produced from this specification. example: [ { "key" : "ownedBy", "value": "Rainpole" } ]. It is nested argument with the following properties.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NicsInitParameters struct {

	// List of IP addresses allocated or in use by this network interface.
	// example: [ "10.1.2.190" ]
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device index of this network interface.
	DeviceIndex *float64 `json:"deviceIndex,omitempty" tf:"device_index,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network instance that this network interface plugs into.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// List of security group ids which this network interface will be assigned to.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`
}

type NicsObservation struct {

	// List of IP addresses allocated or in use by this network interface.
	// example: [ "10.1.2.190" ]
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device index of this network interface.
	DeviceIndex *float64 `json:"deviceIndex,omitempty" tf:"device_index,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network instance that this network interface plugs into.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// List of security group ids which this network interface will be assigned to.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`
}

type NicsParameters struct {

	// List of IP addresses allocated or in use by this network interface.
	// example: [ "10.1.2.190" ]
	// +kubebuilder:validation:Optional
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Additional properties that may be used to extend the base resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// Human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The device index of this network interface.
	// +kubebuilder:validation:Optional
	DeviceIndex *float64 `json:"deviceIndex,omitempty" tf:"device_index,omitempty"`

	// Human-friendly block-device name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network instance that this network interface plugs into.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`

	// List of security group ids which this network interface will be assigned to.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`
}

type TagsInitParameters struct {

	// Tag’s key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Tag’s value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// Tag’s key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Tag’s value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// Tag’s key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Tag’s value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// MachineSpec defines the desired state of Machine
type MachineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MachineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MachineInitParameters `json:"initProvider,omitempty"`
}

// MachineStatus defines the observed state of Machine.
type MachineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MachineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Machine is the Schema for the Machines API. Creates a vra_machine resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type Machine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MachineSpec   `json:"spec"`
	Status MachineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineList contains a list of Machines
type MachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Machine `json:"items"`
}

// Repository type metadata.
var (
	Machine_Kind             = "Machine"
	Machine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Machine_Kind}.String()
	Machine_KindAPIVersion   = Machine_Kind + "." + CRDGroupVersion.String()
	Machine_GroupVersionKind = CRDGroupVersion.WithKind(Machine_Kind)
)

func init() {
	SchemeBuilder.Register(&Machine{}, &MachineList{})
}
