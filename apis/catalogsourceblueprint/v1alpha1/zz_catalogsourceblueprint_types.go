// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogSourceBlueprintInitParameters struct {

	// Custom configuration of the catalog source as a map of key values.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// Human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project this entity belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

type CatalogSourceBlueprintObservation struct {

	// Custom configuration of the catalog source as a map of key values.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// User who created the entity.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// Human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Flag indicating that all items can be requested across all projects.
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// ID of catalog source.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of items found in the catalog source.
	ItemsFound *string `json:"itemsFound,omitempty" tf:"items_found,omitempty"`

	// Number of items imported from the catalog source.
	ItemsImported *string `json:"itemsImported,omitempty" tf:"items_imported,omitempty"`

	// Time at which the last import completed.
	LastImportCompletedAt *string `json:"lastImportCompletedAt,omitempty" tf:"last_import_completed_at,omitempty"`

	// List of errors seen when the catalog source was last imported.
	// +listType=set
	LastImportErrors []*string `json:"lastImportErrors,omitempty" tf:"last_import_errors,omitempty"`

	// Time at which the last import started.
	LastImportStartedAt *string `json:"lastImportStartedAt,omitempty" tf:"last_import_started_at,omitempty"`

	// User who last updated the catalog source.
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project this entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Type of catalog source. Example: blueprint, CFT, etc.
	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

type CatalogSourceBlueprintParameters struct {

	// Custom configuration of the catalog source as a map of key values.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// Human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Human-friendly name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project this entity belongs to.
	// +crossplane:generate:reference:type=github.com/micgoe/provider-vmware-vra/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// CatalogSourceBlueprintSpec defines the desired state of CatalogSourceBlueprint
type CatalogSourceBlueprintSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogSourceBlueprintParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogSourceBlueprintInitParameters `json:"initProvider,omitempty"`
}

// CatalogSourceBlueprintStatus defines the observed state of CatalogSourceBlueprint.
type CatalogSourceBlueprintStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogSourceBlueprintObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CatalogSourceBlueprint is the Schema for the CatalogSourceBlueprints API. A resource that can be used to create a vRealize Automation catalog source of type cloud template (blueprint).
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type CatalogSourceBlueprint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CatalogSourceBlueprintSpec   `json:"spec"`
	Status CatalogSourceBlueprintStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogSourceBlueprintList contains a list of CatalogSourceBlueprints
type CatalogSourceBlueprintList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogSourceBlueprint `json:"items"`
}

// Repository type metadata.
var (
	CatalogSourceBlueprint_Kind             = "CatalogSourceBlueprint"
	CatalogSourceBlueprint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogSourceBlueprint_Kind}.String()
	CatalogSourceBlueprint_KindAPIVersion   = CatalogSourceBlueprint_Kind + "." + CRDGroupVersion.String()
	CatalogSourceBlueprint_GroupVersionKind = CRDGroupVersion.WithKind(CatalogSourceBlueprint_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogSourceBlueprint{}, &CatalogSourceBlueprintList{})
}
