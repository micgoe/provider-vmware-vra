// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VersionInitParameters struct {

	// ID of the cloud template  (blueprint).
	// +crossplane:generate:reference:type=Blueprint
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// Reference to a Blueprint to populate blueprintId.
	// +kubebuilder:validation:Optional
	BlueprintIDRef *v1.Reference `json:"blueprintIdRef,omitempty" tf:"-"`

	// Selector for a Blueprint to populate blueprintId.
	// +kubebuilder:validation:Optional
	BlueprintIDSelector *v1.Selector `json:"blueprintIdSelector,omitempty" tf:"-"`

	// Cloud template  (blueprint) version log.
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Human-friendly description for the cloud template  (blueprint) version.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Flag to indicate whether to release the version.
	Release *bool `json:"release,omitempty" tf:"release,omitempty"`

	// Cloud template  (blueprint) version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VersionObservation struct {

	// Description of cloud template (blueprint).
	BlueprintDescription *string `json:"blueprintDescription,omitempty" tf:"blueprint_description,omitempty"`

	// ID of the cloud template  (blueprint).
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// Cloud template  (blueprint) version log.
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Blueprint YAML content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Date when the entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// User who created the entity.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// Human-friendly description for the cloud template  (blueprint) version.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of cloud template (blueprint) version.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of cloud template (blueprint) version.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of organization that entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// ID of project that entity belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of project that entity belongs to.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Flag to indicate whether to release the version.
	Release *bool `json:"release,omitempty" tf:"release,omitempty"`

	// Status of the cloud template (blueprint). Supported values: DRAFT, VERSIONED, RELEASED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// User who last updated the entity.
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`

	// Flag to indicate if the current content of the cloud template (blueprint) is valid.
	Valid *string `json:"valid,omitempty" tf:"valid,omitempty"`

	// Cloud template  (blueprint) version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VersionParameters struct {

	// ID of the cloud template  (blueprint).
	// +crossplane:generate:reference:type=Blueprint
	// +kubebuilder:validation:Optional
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// Reference to a Blueprint to populate blueprintId.
	// +kubebuilder:validation:Optional
	BlueprintIDRef *v1.Reference `json:"blueprintIdRef,omitempty" tf:"-"`

	// Selector for a Blueprint to populate blueprintId.
	// +kubebuilder:validation:Optional
	BlueprintIDSelector *v1.Selector `json:"blueprintIdSelector,omitempty" tf:"-"`

	// Cloud template  (blueprint) version log.
	// +kubebuilder:validation:Optional
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Human-friendly description for the cloud template  (blueprint) version.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Flag to indicate whether to release the version.
	// +kubebuilder:validation:Optional
	Release *bool `json:"release,omitempty" tf:"release,omitempty"`

	// Cloud template  (blueprint) version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// VersionSpec defines the desired state of Version
type VersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VersionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VersionInitParameters `json:"initProvider,omitempty"`
}

// VersionStatus defines the observed state of Version.
type VersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Version is the Schema for the Versions API. A resource that can be used to create a vRealize Automation cloud template version.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vmware-vra}
type Version struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   VersionSpec   `json:"spec"`
	Status VersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VersionList contains a list of Versions
type VersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Version `json:"items"`
}

// Repository type metadata.
var (
	Version_Kind             = "Version"
	Version_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Version_Kind}.String()
	Version_KindAPIVersion   = Version_Kind + "." + CRDGroupVersion.String()
	Version_GroupVersionKind = CRDGroupVersion.WithKind(Version_Kind)
)

func init() {
	SchemeBuilder.Register(&Version{}, &VersionList{})
}
